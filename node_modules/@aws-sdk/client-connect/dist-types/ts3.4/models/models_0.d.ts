import { MetadataBearer as $MetadataBearer, SmithyException as __SmithyException } from "@aws-sdk/types";

export interface AccessDeniedException extends __SmithyException, $MetadataBearer {
    name: "AccessDeniedException";
    $fault: "client";
    Message?: string;
}

export interface AgentInfo {
    
    Id?: string;
    
    ConnectedToAgentTimestamp?: Date;
}
export declare namespace AgentInfo {
    
    const filterSensitiveLog: (obj: AgentInfo) => any;
}
export declare enum AgentStatusState {
    DISABLED = "DISABLED",
    ENABLED = "ENABLED"
}
export declare enum AgentStatusType {
    CUSTOM = "CUSTOM",
    OFFLINE = "OFFLINE",
    ROUTABLE = "ROUTABLE"
}

export interface AgentStatus {
    
    AgentStatusARN?: string;
    
    AgentStatusId?: string;
    
    Name?: string;
    
    Description?: string;
    
    Type?: AgentStatusType | string;
    
    DisplayOrder?: number;
    
    State?: AgentStatusState | string;
    
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace AgentStatus {
    
    const filterSensitiveLog: (obj: AgentStatus) => any;
}

export interface AgentStatusSummary {
    
    Id?: string;
    
    Arn?: string;
    
    Name?: string;
    
    Type?: AgentStatusType | string;
}
export declare namespace AgentStatusSummary {
    
    const filterSensitiveLog: (obj: AgentStatusSummary) => any;
}
export interface AssociateApprovedOriginRequest {
    
    InstanceId: string | undefined;
    
    Origin: string | undefined;
}
export declare namespace AssociateApprovedOriginRequest {
    
    const filterSensitiveLog: (obj: AssociateApprovedOriginRequest) => any;
}

export interface InternalServiceException extends __SmithyException, $MetadataBearer {
    name: "InternalServiceException";
    $fault: "server";
    
    Message?: string;
}

export interface InvalidParameterException extends __SmithyException, $MetadataBearer {
    name: "InvalidParameterException";
    $fault: "client";
    
    Message?: string;
}

export interface InvalidRequestException extends __SmithyException, $MetadataBearer {
    name: "InvalidRequestException";
    $fault: "client";
    
    Message?: string;
}

export interface ResourceConflictException extends __SmithyException, $MetadataBearer {
    name: "ResourceConflictException";
    $fault: "client";
    Message?: string;
}

export interface ResourceNotFoundException extends __SmithyException, $MetadataBearer {
    name: "ResourceNotFoundException";
    $fault: "client";
    
    Message?: string;
}

export interface ServiceQuotaExceededException extends __SmithyException, $MetadataBearer {
    name: "ServiceQuotaExceededException";
    $fault: "client";
    Message?: string;
}

export interface ThrottlingException extends __SmithyException, $MetadataBearer {
    name: "ThrottlingException";
    $fault: "client";
    Message?: string;
}

export interface LexBot {
    
    Name?: string;
    
    LexRegion?: string;
}
export declare namespace LexBot {
    
    const filterSensitiveLog: (obj: LexBot) => any;
}

export interface LexV2Bot {
    
    AliasArn?: string;
}
export declare namespace LexV2Bot {
    
    const filterSensitiveLog: (obj: LexV2Bot) => any;
}
export interface AssociateBotRequest {
    
    InstanceId: string | undefined;
    
    LexBot?: LexBot;
    
    LexV2Bot?: LexV2Bot;
}
export declare namespace AssociateBotRequest {
    
    const filterSensitiveLog: (obj: AssociateBotRequest) => any;
}

export interface LimitExceededException extends __SmithyException, $MetadataBearer {
    name: "LimitExceededException";
    $fault: "client";
    
    Message?: string;
}
export declare enum VocabularyLanguageCode {
    AR_AE = "ar-AE",
    DE_CH = "de-CH",
    DE_DE = "de-DE",
    EN_AB = "en-AB",
    EN_AU = "en-AU",
    EN_GB = "en-GB",
    EN_IE = "en-IE",
    EN_IN = "en-IN",
    EN_US = "en-US",
    EN_WL = "en-WL",
    ES_ES = "es-ES",
    ES_US = "es-US",
    FR_CA = "fr-CA",
    FR_FR = "fr-FR",
    HI_IN = "hi-IN",
    IT_IT = "it-IT",
    JA_JP = "ja-JP",
    KO_KR = "ko-KR",
    PT_BR = "pt-BR",
    PT_PT = "pt-PT",
    ZH_CN = "zh-CN"
}
export interface AssociateDefaultVocabularyRequest {
    
    InstanceId: string | undefined;
    
    LanguageCode: VocabularyLanguageCode | string | undefined;
    
    VocabularyId?: string;
}
export declare namespace AssociateDefaultVocabularyRequest {
    
    const filterSensitiveLog: (obj: AssociateDefaultVocabularyRequest) => any;
}
export interface AssociateDefaultVocabularyResponse {
}
export declare namespace AssociateDefaultVocabularyResponse {
    
    const filterSensitiveLog: (obj: AssociateDefaultVocabularyResponse) => any;
}
export declare enum InstanceStorageResourceType {
    AGENT_EVENTS = "AGENT_EVENTS",
    CALL_RECORDINGS = "CALL_RECORDINGS",
    CHAT_TRANSCRIPTS = "CHAT_TRANSCRIPTS",
    CONTACT_TRACE_RECORDS = "CONTACT_TRACE_RECORDS",
    MEDIA_STREAMS = "MEDIA_STREAMS",
    SCHEDULED_REPORTS = "SCHEDULED_REPORTS"
}

export interface KinesisFirehoseConfig {
    
    FirehoseArn: string | undefined;
}
export declare namespace KinesisFirehoseConfig {
    
    const filterSensitiveLog: (obj: KinesisFirehoseConfig) => any;
}

export interface KinesisStreamConfig {
    
    StreamArn: string | undefined;
}
export declare namespace KinesisStreamConfig {
    
    const filterSensitiveLog: (obj: KinesisStreamConfig) => any;
}
export declare enum EncryptionType {
    KMS = "KMS"
}

export interface EncryptionConfig {
    
    EncryptionType: EncryptionType | string | undefined;
    
    KeyId: string | undefined;
}
export declare namespace EncryptionConfig {
    
    const filterSensitiveLog: (obj: EncryptionConfig) => any;
}

export interface KinesisVideoStreamConfig {
    
    Prefix: string | undefined;
    
    RetentionPeriodHours: number | undefined;
    
    EncryptionConfig: EncryptionConfig | undefined;
}
export declare namespace KinesisVideoStreamConfig {
    
    const filterSensitiveLog: (obj: KinesisVideoStreamConfig) => any;
}

export interface S3Config {
    
    BucketName: string | undefined;
    
    BucketPrefix: string | undefined;
    
    EncryptionConfig?: EncryptionConfig;
}
export declare namespace S3Config {
    
    const filterSensitiveLog: (obj: S3Config) => any;
}
export declare enum StorageType {
    KINESIS_FIREHOSE = "KINESIS_FIREHOSE",
    KINESIS_STREAM = "KINESIS_STREAM",
    KINESIS_VIDEO_STREAM = "KINESIS_VIDEO_STREAM",
    S3 = "S3"
}

export interface InstanceStorageConfig {
    
    AssociationId?: string;
    
    StorageType: StorageType | string | undefined;
    
    S3Config?: S3Config;
    
    KinesisVideoStreamConfig?: KinesisVideoStreamConfig;
    
    KinesisStreamConfig?: KinesisStreamConfig;
    
    KinesisFirehoseConfig?: KinesisFirehoseConfig;
}
export declare namespace InstanceStorageConfig {
    
    const filterSensitiveLog: (obj: InstanceStorageConfig) => any;
}
export interface AssociateInstanceStorageConfigRequest {
    
    InstanceId: string | undefined;
    
    ResourceType: InstanceStorageResourceType | string | undefined;
    
    StorageConfig: InstanceStorageConfig | undefined;
}
export declare namespace AssociateInstanceStorageConfigRequest {
    
    const filterSensitiveLog: (obj: AssociateInstanceStorageConfigRequest) => any;
}
export interface AssociateInstanceStorageConfigResponse {
    
    AssociationId?: string;
}
export declare namespace AssociateInstanceStorageConfigResponse {
    
    const filterSensitiveLog: (obj: AssociateInstanceStorageConfigResponse) => any;
}
export interface AssociateLambdaFunctionRequest {
    
    InstanceId: string | undefined;
    
    FunctionArn: string | undefined;
}
export declare namespace AssociateLambdaFunctionRequest {
    
    const filterSensitiveLog: (obj: AssociateLambdaFunctionRequest) => any;
}
export interface AssociateLexBotRequest {
    
    InstanceId: string | undefined;
    
    LexBot: LexBot | undefined;
}
export declare namespace AssociateLexBotRequest {
    
    const filterSensitiveLog: (obj: AssociateLexBotRequest) => any;
}
export interface AssociateQueueQuickConnectsRequest {
    
    InstanceId: string | undefined;
    
    QueueId: string | undefined;
    
    QuickConnectIds: string[] | undefined;
}
export declare namespace AssociateQueueQuickConnectsRequest {
    
    const filterSensitiveLog: (obj: AssociateQueueQuickConnectsRequest) => any;
}
export declare enum Channel {
    CHAT = "CHAT",
    TASK = "TASK",
    VOICE = "VOICE"
}

export interface RoutingProfileQueueReference {
    
    QueueId: string | undefined;
    
    Channel: Channel | string | undefined;
}
export declare namespace RoutingProfileQueueReference {
    
    const filterSensitiveLog: (obj: RoutingProfileQueueReference) => any;
}

export interface RoutingProfileQueueConfig {
    
    QueueReference: RoutingProfileQueueReference | undefined;
    
    Priority: number | undefined;
    
    Delay: number | undefined;
}
export declare namespace RoutingProfileQueueConfig {
    
    const filterSensitiveLog: (obj: RoutingProfileQueueConfig) => any;
}
export interface AssociateRoutingProfileQueuesRequest {
    
    InstanceId: string | undefined;
    
    RoutingProfileId: string | undefined;
    
    QueueConfigs: RoutingProfileQueueConfig[] | undefined;
}
export declare namespace AssociateRoutingProfileQueuesRequest {
    
    const filterSensitiveLog: (obj: AssociateRoutingProfileQueuesRequest) => any;
}
export interface AssociateSecurityKeyRequest {
    
    InstanceId: string | undefined;
    
    Key: string | undefined;
}
export declare namespace AssociateSecurityKeyRequest {
    
    const filterSensitiveLog: (obj: AssociateSecurityKeyRequest) => any;
}
export interface AssociateSecurityKeyResponse {
    
    AssociationId?: string;
}
export declare namespace AssociateSecurityKeyResponse {
    
    const filterSensitiveLog: (obj: AssociateSecurityKeyResponse) => any;
}
export interface CreateAgentStatusRequest {
    
    InstanceId: string | undefined;
    
    Name: string | undefined;
    
    Description?: string;
    
    State: AgentStatusState | string | undefined;
    
    DisplayOrder?: number;
    
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace CreateAgentStatusRequest {
    
    const filterSensitiveLog: (obj: CreateAgentStatusRequest) => any;
}
export interface CreateAgentStatusResponse {
    
    AgentStatusARN?: string;
    
    AgentStatusId?: string;
}
export declare namespace CreateAgentStatusResponse {
    
    const filterSensitiveLog: (obj: CreateAgentStatusResponse) => any;
}

export interface DuplicateResourceException extends __SmithyException, $MetadataBearer {
    name: "DuplicateResourceException";
    $fault: "client";
    Message?: string;
}
export declare enum ContactFlowType {
    AGENT_HOLD = "AGENT_HOLD",
    AGENT_TRANSFER = "AGENT_TRANSFER",
    AGENT_WHISPER = "AGENT_WHISPER",
    CONTACT_FLOW = "CONTACT_FLOW",
    CUSTOMER_HOLD = "CUSTOMER_HOLD",
    CUSTOMER_QUEUE = "CUSTOMER_QUEUE",
    CUSTOMER_WHISPER = "CUSTOMER_WHISPER",
    OUTBOUND_WHISPER = "OUTBOUND_WHISPER",
    QUEUE_TRANSFER = "QUEUE_TRANSFER"
}
export interface CreateContactFlowRequest {
    
    InstanceId: string | undefined;
    
    Name: string | undefined;
    
    Type: ContactFlowType | string | undefined;
    
    Description?: string;
    
    Content: string | undefined;
    
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace CreateContactFlowRequest {
    
    const filterSensitiveLog: (obj: CreateContactFlowRequest) => any;
}
export interface CreateContactFlowResponse {
    
    ContactFlowId?: string;
    
    ContactFlowArn?: string;
}
export declare namespace CreateContactFlowResponse {
    
    const filterSensitiveLog: (obj: CreateContactFlowResponse) => any;
}

export interface ProblemDetail {
    
    message?: string;
}
export declare namespace ProblemDetail {
    
    const filterSensitiveLog: (obj: ProblemDetail) => any;
}

export interface InvalidContactFlowException extends __SmithyException, $MetadataBearer {
    name: "InvalidContactFlowException";
    $fault: "client";
    
    problems?: ProblemDetail[];
}
export interface CreateContactFlowModuleRequest {
    
    InstanceId: string | undefined;
    
    Name: string | undefined;
    
    Description?: string;
    
    Content: string | undefined;
    
    Tags?: {
        [key: string]: string;
    };
    
    ClientToken?: string;
}
export declare namespace CreateContactFlowModuleRequest {
    
    const filterSensitiveLog: (obj: CreateContactFlowModuleRequest) => any;
}
export interface CreateContactFlowModuleResponse {
    
    Id?: string;
    
    Arn?: string;
}
export declare namespace CreateContactFlowModuleResponse {
    
    const filterSensitiveLog: (obj: CreateContactFlowModuleResponse) => any;
}

export interface IdempotencyException extends __SmithyException, $MetadataBearer {
    name: "IdempotencyException";
    $fault: "client";
    Message?: string;
}

export interface InvalidContactFlowModuleException extends __SmithyException, $MetadataBearer {
    name: "InvalidContactFlowModuleException";
    $fault: "client";
    Problems?: ProblemDetail[];
}
export declare enum HoursOfOperationDays {
    FRIDAY = "FRIDAY",
    MONDAY = "MONDAY",
    SATURDAY = "SATURDAY",
    SUNDAY = "SUNDAY",
    THURSDAY = "THURSDAY",
    TUESDAY = "TUESDAY",
    WEDNESDAY = "WEDNESDAY"
}

export interface HoursOfOperationTimeSlice {
    
    Hours: number | undefined;
    
    Minutes: number | undefined;
}
export declare namespace HoursOfOperationTimeSlice {
    
    const filterSensitiveLog: (obj: HoursOfOperationTimeSlice) => any;
}

export interface HoursOfOperationConfig {
    
    Day: HoursOfOperationDays | string | undefined;
    
    StartTime: HoursOfOperationTimeSlice | undefined;
    
    EndTime: HoursOfOperationTimeSlice | undefined;
}
export declare namespace HoursOfOperationConfig {
    
    const filterSensitiveLog: (obj: HoursOfOperationConfig) => any;
}
export interface CreateHoursOfOperationRequest {
    
    InstanceId: string | undefined;
    
    Name: string | undefined;
    
    Description?: string;
    
    TimeZone: string | undefined;
    
    Config: HoursOfOperationConfig[] | undefined;
    
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace CreateHoursOfOperationRequest {
    
    const filterSensitiveLog: (obj: CreateHoursOfOperationRequest) => any;
}
export interface CreateHoursOfOperationResponse {
    
    HoursOfOperationId?: string;
    
    HoursOfOperationArn?: string;
}
export declare namespace CreateHoursOfOperationResponse {
    
    const filterSensitiveLog: (obj: CreateHoursOfOperationResponse) => any;
}
export declare enum DirectoryType {
    CONNECT_MANAGED = "CONNECT_MANAGED",
    EXISTING_DIRECTORY = "EXISTING_DIRECTORY",
    SAML = "SAML"
}
export interface CreateInstanceRequest {
    
    ClientToken?: string;
    
    IdentityManagementType: DirectoryType | string | undefined;
    
    InstanceAlias?: string;
    
    DirectoryId?: string;
    
    InboundCallsEnabled: boolean | undefined;
    
    OutboundCallsEnabled: boolean | undefined;
}
export declare namespace CreateInstanceRequest {
    
    const filterSensitiveLog: (obj: CreateInstanceRequest) => any;
}
export interface CreateInstanceResponse {
    
    Id?: string;
    
    Arn?: string;
}
export declare namespace CreateInstanceResponse {
    
    const filterSensitiveLog: (obj: CreateInstanceResponse) => any;
}
export declare enum IntegrationType {
    EVENT = "EVENT",
    PINPOINT_APP = "PINPOINT_APP",
    VOICE_ID = "VOICE_ID",
    WISDOM_ASSISTANT = "WISDOM_ASSISTANT",
    WISDOM_KNOWLEDGE_BASE = "WISDOM_KNOWLEDGE_BASE"
}
export declare enum SourceType {
    SALESFORCE = "SALESFORCE",
    ZENDESK = "ZENDESK"
}
export interface CreateIntegrationAssociationRequest {
    
    InstanceId: string | undefined;
    
    IntegrationType: IntegrationType | string | undefined;
    
    IntegrationArn: string | undefined;
    
    SourceApplicationUrl?: string;
    
    SourceApplicationName?: string;
    
    SourceType?: SourceType | string;
    
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace CreateIntegrationAssociationRequest {
    
    const filterSensitiveLog: (obj: CreateIntegrationAssociationRequest) => any;
}
export interface CreateIntegrationAssociationResponse {
    
    IntegrationAssociationId?: string;
    
    IntegrationAssociationArn?: string;
}
export declare namespace CreateIntegrationAssociationResponse {
    
    const filterSensitiveLog: (obj: CreateIntegrationAssociationResponse) => any;
}

export interface OutboundCallerConfig {
    
    OutboundCallerIdName?: string;
    
    OutboundCallerIdNumberId?: string;
    
    OutboundFlowId?: string;
}
export declare namespace OutboundCallerConfig {
    
    const filterSensitiveLog: (obj: OutboundCallerConfig) => any;
}
export interface CreateQueueRequest {
    
    InstanceId: string | undefined;
    
    Name: string | undefined;
    
    Description?: string;
    
    OutboundCallerConfig?: OutboundCallerConfig;
    
    HoursOfOperationId: string | undefined;
    
    MaxContacts?: number;
    
    QuickConnectIds?: string[];
    
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace CreateQueueRequest {
    
    const filterSensitiveLog: (obj: CreateQueueRequest) => any;
}
export interface CreateQueueResponse {
    
    QueueArn?: string;
    
    QueueId?: string;
}
export declare namespace CreateQueueResponse {
    
    const filterSensitiveLog: (obj: CreateQueueResponse) => any;
}

export interface PhoneNumberQuickConnectConfig {
    
    PhoneNumber: string | undefined;
}
export declare namespace PhoneNumberQuickConnectConfig {
    
    const filterSensitiveLog: (obj: PhoneNumberQuickConnectConfig) => any;
}

export interface QueueQuickConnectConfig {
    
    QueueId: string | undefined;
    
    ContactFlowId: string | undefined;
}
export declare namespace QueueQuickConnectConfig {
    
    const filterSensitiveLog: (obj: QueueQuickConnectConfig) => any;
}
export declare enum QuickConnectType {
    PHONE_NUMBER = "PHONE_NUMBER",
    QUEUE = "QUEUE",
    USER = "USER"
}

export interface UserQuickConnectConfig {
    
    UserId: string | undefined;
    
    ContactFlowId: string | undefined;
}
export declare namespace UserQuickConnectConfig {
    
    const filterSensitiveLog: (obj: UserQuickConnectConfig) => any;
}

export interface QuickConnectConfig {
    
    QuickConnectType: QuickConnectType | string | undefined;
    
    UserConfig?: UserQuickConnectConfig;
    
    QueueConfig?: QueueQuickConnectConfig;
    
    PhoneConfig?: PhoneNumberQuickConnectConfig;
}
export declare namespace QuickConnectConfig {
    
    const filterSensitiveLog: (obj: QuickConnectConfig) => any;
}
export interface CreateQuickConnectRequest {
    
    InstanceId: string | undefined;
    
    Name: string | undefined;
    
    Description?: string;
    
    QuickConnectConfig: QuickConnectConfig | undefined;
    
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace CreateQuickConnectRequest {
    
    const filterSensitiveLog: (obj: CreateQuickConnectRequest) => any;
}
export interface CreateQuickConnectResponse {
    
    QuickConnectARN?: string;
    
    QuickConnectId?: string;
}
export declare namespace CreateQuickConnectResponse {
    
    const filterSensitiveLog: (obj: CreateQuickConnectResponse) => any;
}

export interface MediaConcurrency {
    
    Channel: Channel | string | undefined;
    
    Concurrency: number | undefined;
}
export declare namespace MediaConcurrency {
    
    const filterSensitiveLog: (obj: MediaConcurrency) => any;
}
export interface CreateRoutingProfileRequest {
    
    InstanceId: string | undefined;
    
    Name: string | undefined;
    
    Description: string | undefined;
    
    DefaultOutboundQueueId: string | undefined;
    
    QueueConfigs?: RoutingProfileQueueConfig[];
    
    MediaConcurrencies: MediaConcurrency[] | undefined;
    
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace CreateRoutingProfileRequest {
    
    const filterSensitiveLog: (obj: CreateRoutingProfileRequest) => any;
}
export interface CreateRoutingProfileResponse {
    
    RoutingProfileArn?: string;
    
    RoutingProfileId?: string;
}
export declare namespace CreateRoutingProfileResponse {
    
    const filterSensitiveLog: (obj: CreateRoutingProfileResponse) => any;
}
export interface CreateSecurityProfileRequest {
    
    SecurityProfileName: string | undefined;
    
    Description?: string;
    
    Permissions?: string[];
    
    InstanceId: string | undefined;
    
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace CreateSecurityProfileRequest {
    
    const filterSensitiveLog: (obj: CreateSecurityProfileRequest) => any;
}
export interface CreateSecurityProfileResponse {
    
    SecurityProfileId?: string;
    
    SecurityProfileArn?: string;
}
export declare namespace CreateSecurityProfileResponse {
    
    const filterSensitiveLog: (obj: CreateSecurityProfileResponse) => any;
}
export declare enum UseCaseType {
    CONNECT_CAMPAIGNS = "CONNECT_CAMPAIGNS",
    RULES_EVALUATION = "RULES_EVALUATION"
}
export interface CreateUseCaseRequest {
    
    InstanceId: string | undefined;
    
    IntegrationAssociationId: string | undefined;
    
    UseCaseType: UseCaseType | string | undefined;
    
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace CreateUseCaseRequest {
    
    const filterSensitiveLog: (obj: CreateUseCaseRequest) => any;
}
export interface CreateUseCaseResponse {
    
    UseCaseId?: string;
    
    UseCaseArn?: string;
}
export declare namespace CreateUseCaseResponse {
    
    const filterSensitiveLog: (obj: CreateUseCaseResponse) => any;
}

export interface UserIdentityInfo {
    
    FirstName?: string;
    
    LastName?: string;
    
    Email?: string;
}
export declare namespace UserIdentityInfo {
    
    const filterSensitiveLog: (obj: UserIdentityInfo) => any;
}
export declare enum PhoneType {
    DESK_PHONE = "DESK_PHONE",
    SOFT_PHONE = "SOFT_PHONE"
}

export interface UserPhoneConfig {
    
    PhoneType: PhoneType | string | undefined;
    
    AutoAccept?: boolean;
    
    AfterContactWorkTimeLimit?: number;
    
    DeskPhoneNumber?: string;
}
export declare namespace UserPhoneConfig {
    
    const filterSensitiveLog: (obj: UserPhoneConfig) => any;
}
export interface CreateUserRequest {
    
    Username: string | undefined;
    
    Password?: string;
    
    IdentityInfo?: UserIdentityInfo;
    
    PhoneConfig: UserPhoneConfig | undefined;
    
    DirectoryUserId?: string;
    
    SecurityProfileIds: string[] | undefined;
    
    RoutingProfileId: string | undefined;
    
    HierarchyGroupId?: string;
    
    InstanceId: string | undefined;
    
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace CreateUserRequest {
    
    const filterSensitiveLog: (obj: CreateUserRequest) => any;
}
export interface CreateUserResponse {
    
    UserId?: string;
    
    UserArn?: string;
}
export declare namespace CreateUserResponse {
    
    const filterSensitiveLog: (obj: CreateUserResponse) => any;
}
export interface CreateUserHierarchyGroupRequest {
    
    Name: string | undefined;
    
    ParentGroupId?: string;
    
    InstanceId: string | undefined;
    
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace CreateUserHierarchyGroupRequest {
    
    const filterSensitiveLog: (obj: CreateUserHierarchyGroupRequest) => any;
}
export interface CreateUserHierarchyGroupResponse {
    
    HierarchyGroupId?: string;
    
    HierarchyGroupArn?: string;
}
export declare namespace CreateUserHierarchyGroupResponse {
    
    const filterSensitiveLog: (obj: CreateUserHierarchyGroupResponse) => any;
}
export interface CreateVocabularyRequest {
    
    ClientToken?: string;
    
    InstanceId: string | undefined;
    
    VocabularyName: string | undefined;
    
    LanguageCode: VocabularyLanguageCode | string | undefined;
    
    Content: string | undefined;
    
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace CreateVocabularyRequest {
    
    const filterSensitiveLog: (obj: CreateVocabularyRequest) => any;
}
export declare enum VocabularyState {
    ACTIVE = "ACTIVE",
    CREATION_FAILED = "CREATION_FAILED",
    CREATION_IN_PROGRESS = "CREATION_IN_PROGRESS",
    DELETE_IN_PROGRESS = "DELETE_IN_PROGRESS"
}
export interface CreateVocabularyResponse {
    
    VocabularyArn: string | undefined;
    
    VocabularyId: string | undefined;
    
    State: VocabularyState | string | undefined;
}
export declare namespace CreateVocabularyResponse {
    
    const filterSensitiveLog: (obj: CreateVocabularyResponse) => any;
}
export interface DeleteContactFlowRequest {
    
    InstanceId: string | undefined;
    
    ContactFlowId: string | undefined;
}
export declare namespace DeleteContactFlowRequest {
    
    const filterSensitiveLog: (obj: DeleteContactFlowRequest) => any;
}
export interface DeleteContactFlowModuleRequest {
    
    InstanceId: string | undefined;
    
    ContactFlowModuleId: string | undefined;
}
export declare namespace DeleteContactFlowModuleRequest {
    
    const filterSensitiveLog: (obj: DeleteContactFlowModuleRequest) => any;
}
export interface DeleteContactFlowModuleResponse {
}
export declare namespace DeleteContactFlowModuleResponse {
    
    const filterSensitiveLog: (obj: DeleteContactFlowModuleResponse) => any;
}
export interface DeleteHoursOfOperationRequest {
    
    InstanceId: string | undefined;
    
    HoursOfOperationId: string | undefined;
}
export declare namespace DeleteHoursOfOperationRequest {
    
    const filterSensitiveLog: (obj: DeleteHoursOfOperationRequest) => any;
}
export interface DeleteInstanceRequest {
    
    InstanceId: string | undefined;
}
export declare namespace DeleteInstanceRequest {
    
    const filterSensitiveLog: (obj: DeleteInstanceRequest) => any;
}
export interface DeleteIntegrationAssociationRequest {
    
    InstanceId: string | undefined;
    
    IntegrationAssociationId: string | undefined;
}
export declare namespace DeleteIntegrationAssociationRequest {
    
    const filterSensitiveLog: (obj: DeleteIntegrationAssociationRequest) => any;
}
export interface DeleteQuickConnectRequest {
    
    InstanceId: string | undefined;
    
    QuickConnectId: string | undefined;
}
export declare namespace DeleteQuickConnectRequest {
    
    const filterSensitiveLog: (obj: DeleteQuickConnectRequest) => any;
}
export interface DeleteSecurityProfileRequest {
    
    InstanceId: string | undefined;
    
    SecurityProfileId: string | undefined;
}
export declare namespace DeleteSecurityProfileRequest {
    
    const filterSensitiveLog: (obj: DeleteSecurityProfileRequest) => any;
}
export declare enum ResourceType {
    CONTACT = "CONTACT",
    CONTACT_FLOW = "CONTACT_FLOW",
    HIERARCHY_GROUP = "HIERARCHY_GROUP",
    HIERARCHY_LEVEL = "HIERARCHY_LEVEL",
    INSTANCE = "INSTANCE",
    PARTICIPANT = "PARTICIPANT",
    USER = "USER"
}

export interface ResourceInUseException extends __SmithyException, $MetadataBearer {
    name: "ResourceInUseException";
    $fault: "client";
    Message?: string;
    
    ResourceType?: ResourceType | string;
    
    ResourceId?: string;
}
export interface DeleteUseCaseRequest {
    
    InstanceId: string | undefined;
    
    IntegrationAssociationId: string | undefined;
    
    UseCaseId: string | undefined;
}
export declare namespace DeleteUseCaseRequest {
    
    const filterSensitiveLog: (obj: DeleteUseCaseRequest) => any;
}
export interface DeleteUserRequest {
    
    InstanceId: string | undefined;
    
    UserId: string | undefined;
}
export declare namespace DeleteUserRequest {
    
    const filterSensitiveLog: (obj: DeleteUserRequest) => any;
}
export interface DeleteUserHierarchyGroupRequest {
    
    HierarchyGroupId: string | undefined;
    
    InstanceId: string | undefined;
}
export declare namespace DeleteUserHierarchyGroupRequest {
    
    const filterSensitiveLog: (obj: DeleteUserHierarchyGroupRequest) => any;
}
export interface DeleteVocabularyRequest {
    
    InstanceId: string | undefined;
    
    VocabularyId: string | undefined;
}
export declare namespace DeleteVocabularyRequest {
    
    const filterSensitiveLog: (obj: DeleteVocabularyRequest) => any;
}
export interface DeleteVocabularyResponse {
    
    VocabularyArn: string | undefined;
    
    VocabularyId: string | undefined;
    
    State: VocabularyState | string | undefined;
}
export declare namespace DeleteVocabularyResponse {
    
    const filterSensitiveLog: (obj: DeleteVocabularyResponse) => any;
}
export interface DescribeAgentStatusRequest {
    
    InstanceId: string | undefined;
    
    AgentStatusId: string | undefined;
}
export declare namespace DescribeAgentStatusRequest {
    
    const filterSensitiveLog: (obj: DescribeAgentStatusRequest) => any;
}
export interface DescribeAgentStatusResponse {
    
    AgentStatus?: AgentStatus;
}
export declare namespace DescribeAgentStatusResponse {
    
    const filterSensitiveLog: (obj: DescribeAgentStatusResponse) => any;
}
export interface DescribeContactRequest {
    
    InstanceId: string | undefined;
    
    ContactId: string | undefined;
}
export declare namespace DescribeContactRequest {
    
    const filterSensitiveLog: (obj: DescribeContactRequest) => any;
}
export declare enum ContactInitiationMethod {
    API = "API",
    CALLBACK = "CALLBACK",
    INBOUND = "INBOUND",
    OUTBOUND = "OUTBOUND",
    QUEUE_TRANSFER = "QUEUE_TRANSFER",
    TRANSFER = "TRANSFER"
}

export interface QueueInfo {
    
    Id?: string;
    
    EnqueueTimestamp?: Date;
}
export declare namespace QueueInfo {
    
    const filterSensitiveLog: (obj: QueueInfo) => any;
}

export interface Contact {
    
    Arn?: string;
    
    Id?: string;
    
    InitialContactId?: string;
    
    PreviousContactId?: string;
    
    InitiationMethod?: ContactInitiationMethod | string;
    
    Name?: string;
    
    Description?: string;
    
    Channel?: Channel | string;
    
    QueueInfo?: QueueInfo;
    
    AgentInfo?: AgentInfo;
    
    InitiationTimestamp?: Date;
    
    DisconnectTimestamp?: Date;
    
    LastUpdateTimestamp?: Date;
    
    ScheduledTimestamp?: Date;
}
export declare namespace Contact {
    
    const filterSensitiveLog: (obj: Contact) => any;
}
export interface DescribeContactResponse {
    
    Contact?: Contact;
}
export declare namespace DescribeContactResponse {
    
    const filterSensitiveLog: (obj: DescribeContactResponse) => any;
}

export interface ContactFlowNotPublishedException extends __SmithyException, $MetadataBearer {
    name: "ContactFlowNotPublishedException";
    $fault: "client";
    Message?: string;
}
export interface DescribeContactFlowRequest {
    
    InstanceId: string | undefined;
    
    ContactFlowId: string | undefined;
}
export declare namespace DescribeContactFlowRequest {
    
    const filterSensitiveLog: (obj: DescribeContactFlowRequest) => any;
}
export declare enum ContactFlowState {
    ACTIVE = "ACTIVE",
    ARCHIVED = "ARCHIVED"
}

export interface ContactFlow {
    
    Arn?: string;
    
    Id?: string;
    
    Name?: string;
    
    Type?: ContactFlowType | string;
    
    State?: ContactFlowState | string;
    
    Description?: string;
    
    Content?: string;
    
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace ContactFlow {
    
    const filterSensitiveLog: (obj: ContactFlow) => any;
}
export interface DescribeContactFlowResponse {
    
    ContactFlow?: ContactFlow;
}
export declare namespace DescribeContactFlowResponse {
    
    const filterSensitiveLog: (obj: DescribeContactFlowResponse) => any;
}
export interface DescribeContactFlowModuleRequest {
    
    InstanceId: string | undefined;
    
    ContactFlowModuleId: string | undefined;
}
export declare namespace DescribeContactFlowModuleRequest {
    
    const filterSensitiveLog: (obj: DescribeContactFlowModuleRequest) => any;
}
export declare enum ContactFlowModuleState {
    ACTIVE = "ACTIVE",
    ARCHIVED = "ARCHIVED"
}
export declare enum ContactFlowModuleStatus {
    PUBLISHED = "PUBLISHED",
    SAVED = "SAVED"
}

export interface ContactFlowModule {
    
    Arn?: string;
    
    Id?: string;
    
    Name?: string;
    
    Content?: string;
    
    Description?: string;
    
    State?: ContactFlowModuleState | string;
    
    Status?: ContactFlowModuleStatus | string;
    
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace ContactFlowModule {
    
    const filterSensitiveLog: (obj: ContactFlowModule) => any;
}
export interface DescribeContactFlowModuleResponse {
    
    ContactFlowModule?: ContactFlowModule;
}
export declare namespace DescribeContactFlowModuleResponse {
    
    const filterSensitiveLog: (obj: DescribeContactFlowModuleResponse) => any;
}
export interface DescribeHoursOfOperationRequest {
    
    InstanceId: string | undefined;
    
    HoursOfOperationId: string | undefined;
}
export declare namespace DescribeHoursOfOperationRequest {
    
    const filterSensitiveLog: (obj: DescribeHoursOfOperationRequest) => any;
}

export interface HoursOfOperation {
    
    HoursOfOperationId?: string;
    
    HoursOfOperationArn?: string;
    
    Name?: string;
    
    Description?: string;
    
    TimeZone?: string;
    
    Config?: HoursOfOperationConfig[];
    
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace HoursOfOperation {
    
    const filterSensitiveLog: (obj: HoursOfOperation) => any;
}
export interface DescribeHoursOfOperationResponse {
    
    HoursOfOperation?: HoursOfOperation;
}
export declare namespace DescribeHoursOfOperationResponse {
    
    const filterSensitiveLog: (obj: DescribeHoursOfOperationResponse) => any;
}
export interface DescribeInstanceRequest {
    
    InstanceId: string | undefined;
}
export declare namespace DescribeInstanceRequest {
    
    const filterSensitiveLog: (obj: DescribeInstanceRequest) => any;
}
export declare enum InstanceStatus {
    ACTIVE = "ACTIVE",
    CREATION_FAILED = "CREATION_FAILED",
    CREATION_IN_PROGRESS = "CREATION_IN_PROGRESS"
}

export interface InstanceStatusReason {
    
    Message?: string;
}
export declare namespace InstanceStatusReason {
    
    const filterSensitiveLog: (obj: InstanceStatusReason) => any;
}

export interface Instance {
    
    Id?: string;
    
    Arn?: string;
    
    IdentityManagementType?: DirectoryType | string;
    
    InstanceAlias?: string;
    
    CreatedTime?: Date;
    
    ServiceRole?: string;
    
    InstanceStatus?: InstanceStatus | string;
    
    StatusReason?: InstanceStatusReason;
    
    InboundCallsEnabled?: boolean;
    
    OutboundCallsEnabled?: boolean;
}
export declare namespace Instance {
    
    const filterSensitiveLog: (obj: Instance) => any;
}
export interface DescribeInstanceResponse {
    
    Instance?: Instance;
}
export declare namespace DescribeInstanceResponse {
    
    const filterSensitiveLog: (obj: DescribeInstanceResponse) => any;
}
export declare enum InstanceAttributeType {
    AUTO_RESOLVE_BEST_VOICES = "AUTO_RESOLVE_BEST_VOICES",
    CONTACTFLOW_LOGS = "CONTACTFLOW_LOGS",
    CONTACT_LENS = "CONTACT_LENS",
    EARLY_MEDIA = "EARLY_MEDIA",
    INBOUND_CALLS = "INBOUND_CALLS",
    OUTBOUND_CALLS = "OUTBOUND_CALLS",
    USE_CUSTOM_TTS_VOICES = "USE_CUSTOM_TTS_VOICES"
}
export interface DescribeInstanceAttributeRequest {
    
    InstanceId: string | undefined;
    
    AttributeType: InstanceAttributeType | string | undefined;
}
export declare namespace DescribeInstanceAttributeRequest {
    
    const filterSensitiveLog: (obj: DescribeInstanceAttributeRequest) => any;
}

export interface Attribute {
    
    AttributeType?: InstanceAttributeType | string;
    
    Value?: string;
}
export declare namespace Attribute {
    
    const filterSensitiveLog: (obj: Attribute) => any;
}
export interface DescribeInstanceAttributeResponse {
    
    Attribute?: Attribute;
}
export declare namespace DescribeInstanceAttributeResponse {
    
    const filterSensitiveLog: (obj: DescribeInstanceAttributeResponse) => any;
}
export interface DescribeInstanceStorageConfigRequest {
    
    InstanceId: string | undefined;
    
    AssociationId: string | undefined;
    
    ResourceType: InstanceStorageResourceType | string | undefined;
}
export declare namespace DescribeInstanceStorageConfigRequest {
    
    const filterSensitiveLog: (obj: DescribeInstanceStorageConfigRequest) => any;
}
export interface DescribeInstanceStorageConfigResponse {
    
    StorageConfig?: InstanceStorageConfig;
}
export declare namespace DescribeInstanceStorageConfigResponse {
    
    const filterSensitiveLog: (obj: DescribeInstanceStorageConfigResponse) => any;
}
export interface DescribeQueueRequest {
    
    InstanceId: string | undefined;
    
    QueueId: string | undefined;
}
export declare namespace DescribeQueueRequest {
    
    const filterSensitiveLog: (obj: DescribeQueueRequest) => any;
}
export declare enum QueueStatus {
    DISABLED = "DISABLED",
    ENABLED = "ENABLED"
}

export interface Queue {
    
    Name?: string;
    
    QueueArn?: string;
    
    QueueId?: string;
    
    Description?: string;
    
    OutboundCallerConfig?: OutboundCallerConfig;
    
    HoursOfOperationId?: string;
    
    MaxContacts?: number;
    
    Status?: QueueStatus | string;
    
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace Queue {
    
    const filterSensitiveLog: (obj: Queue) => any;
}
export interface DescribeQueueResponse {
    
    Queue?: Queue;
}
export declare namespace DescribeQueueResponse {
    
    const filterSensitiveLog: (obj: DescribeQueueResponse) => any;
}
export interface DescribeQuickConnectRequest {
    
    InstanceId: string | undefined;
    
    QuickConnectId: string | undefined;
}
export declare namespace DescribeQuickConnectRequest {
    
    const filterSensitiveLog: (obj: DescribeQuickConnectRequest) => any;
}

export interface QuickConnect {
    
    QuickConnectARN?: string;
    
    QuickConnectId?: string;
    
    Name?: string;
    
    Description?: string;
    
    QuickConnectConfig?: QuickConnectConfig;
    
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace QuickConnect {
    
    const filterSensitiveLog: (obj: QuickConnect) => any;
}
export interface DescribeQuickConnectResponse {
    
    QuickConnect?: QuickConnect;
}
export declare namespace DescribeQuickConnectResponse {
    
    const filterSensitiveLog: (obj: DescribeQuickConnectResponse) => any;
}
export interface DescribeRoutingProfileRequest {
    
    InstanceId: string | undefined;
    
    RoutingProfileId: string | undefined;
}
export declare namespace DescribeRoutingProfileRequest {
    
    const filterSensitiveLog: (obj: DescribeRoutingProfileRequest) => any;
}

export interface RoutingProfile {
    
    InstanceId?: string;
    
    Name?: string;
    
    RoutingProfileArn?: string;
    
    RoutingProfileId?: string;
    
    Description?: string;
    
    MediaConcurrencies?: MediaConcurrency[];
    
    DefaultOutboundQueueId?: string;
    
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace RoutingProfile {
    
    const filterSensitiveLog: (obj: RoutingProfile) => any;
}
export interface DescribeRoutingProfileResponse {
    
    RoutingProfile?: RoutingProfile;
}
export declare namespace DescribeRoutingProfileResponse {
    
    const filterSensitiveLog: (obj: DescribeRoutingProfileResponse) => any;
}
export interface DescribeSecurityProfileRequest {
    
    SecurityProfileId: string | undefined;
    
    InstanceId: string | undefined;
}
export declare namespace DescribeSecurityProfileRequest {
    
    const filterSensitiveLog: (obj: DescribeSecurityProfileRequest) => any;
}

export interface SecurityProfile {
    
    Id?: string;
    
    OrganizationResourceId?: string;
    
    Arn?: string;
    
    SecurityProfileName?: string;
    
    Description?: string;
    
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace SecurityProfile {
    
    const filterSensitiveLog: (obj: SecurityProfile) => any;
}
export interface DescribeSecurityProfileResponse {
    
    SecurityProfile?: SecurityProfile;
}
export declare namespace DescribeSecurityProfileResponse {
    
    const filterSensitiveLog: (obj: DescribeSecurityProfileResponse) => any;
}
export interface DescribeUserRequest {
    
    UserId: string | undefined;
    
    InstanceId: string | undefined;
}
export declare namespace DescribeUserRequest {
    
    const filterSensitiveLog: (obj: DescribeUserRequest) => any;
}

export interface User {
    
    Id?: string;
    
    Arn?: string;
    
    Username?: string;
    
    IdentityInfo?: UserIdentityInfo;
    
    PhoneConfig?: UserPhoneConfig;
    
    DirectoryUserId?: string;
    
    SecurityProfileIds?: string[];
    
    RoutingProfileId?: string;
    
    HierarchyGroupId?: string;
    
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace User {
    
    const filterSensitiveLog: (obj: User) => any;
}
export interface DescribeUserResponse {
    
    User?: User;
}
export declare namespace DescribeUserResponse {
    
    const filterSensitiveLog: (obj: DescribeUserResponse) => any;
}
export interface DescribeUserHierarchyGroupRequest {
    
    HierarchyGroupId: string | undefined;
    
    InstanceId: string | undefined;
}
export declare namespace DescribeUserHierarchyGroupRequest {
    
    const filterSensitiveLog: (obj: DescribeUserHierarchyGroupRequest) => any;
}

export interface HierarchyGroupSummary {
    
    Id?: string;
    
    Arn?: string;
    
    Name?: string;
}
export declare namespace HierarchyGroupSummary {
    
    const filterSensitiveLog: (obj: HierarchyGroupSummary) => any;
}

export interface HierarchyPath {
    
    LevelOne?: HierarchyGroupSummary;
    
    LevelTwo?: HierarchyGroupSummary;
    
    LevelThree?: HierarchyGroupSummary;
    
    LevelFour?: HierarchyGroupSummary;
    
    LevelFive?: HierarchyGroupSummary;
}
export declare namespace HierarchyPath {
    
    const filterSensitiveLog: (obj: HierarchyPath) => any;
}

export interface HierarchyGroup {
    
    Id?: string;
    
    Arn?: string;
    
    Name?: string;
    
    LevelId?: string;
    
    HierarchyPath?: HierarchyPath;
    
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace HierarchyGroup {
    
    const filterSensitiveLog: (obj: HierarchyGroup) => any;
}
export interface DescribeUserHierarchyGroupResponse {
    
    HierarchyGroup?: HierarchyGroup;
}
export declare namespace DescribeUserHierarchyGroupResponse {
    
    const filterSensitiveLog: (obj: DescribeUserHierarchyGroupResponse) => any;
}
export interface DescribeUserHierarchyStructureRequest {
    
    InstanceId: string | undefined;
}
export declare namespace DescribeUserHierarchyStructureRequest {
    
    const filterSensitiveLog: (obj: DescribeUserHierarchyStructureRequest) => any;
}

export interface HierarchyLevel {
    
    Id?: string;
    
    Arn?: string;
    
    Name?: string;
}
export declare namespace HierarchyLevel {
    
    const filterSensitiveLog: (obj: HierarchyLevel) => any;
}

export interface HierarchyStructure {
    
    LevelOne?: HierarchyLevel;
    
    LevelTwo?: HierarchyLevel;
    
    LevelThree?: HierarchyLevel;
    
    LevelFour?: HierarchyLevel;
    
    LevelFive?: HierarchyLevel;
}
export declare namespace HierarchyStructure {
    
    const filterSensitiveLog: (obj: HierarchyStructure) => any;
}
export interface DescribeUserHierarchyStructureResponse {
    
    HierarchyStructure?: HierarchyStructure;
}
export declare namespace DescribeUserHierarchyStructureResponse {
    
    const filterSensitiveLog: (obj: DescribeUserHierarchyStructureResponse) => any;
}
export interface DescribeVocabularyRequest {
    
    InstanceId: string | undefined;
    
    VocabularyId: string | undefined;
}
export declare namespace DescribeVocabularyRequest {
    
    const filterSensitiveLog: (obj: DescribeVocabularyRequest) => any;
}

export interface Vocabulary {
    
    Name: string | undefined;
    
    Id: string | undefined;
    
    Arn: string | undefined;
    
    LanguageCode: VocabularyLanguageCode | string | undefined;
    
    State: VocabularyState | string | undefined;
    
    LastModifiedTime: Date | undefined;
    
    FailureReason?: string;
    
    Content?: string;
    
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace Vocabulary {
    
    const filterSensitiveLog: (obj: Vocabulary) => any;
}
export interface DescribeVocabularyResponse {
    
    Vocabulary: Vocabulary | undefined;
}
export declare namespace DescribeVocabularyResponse {
    
    const filterSensitiveLog: (obj: DescribeVocabularyResponse) => any;
}
export interface DisassociateApprovedOriginRequest {
    
    InstanceId: string | undefined;
    
    Origin: string | undefined;
}
export declare namespace DisassociateApprovedOriginRequest {
    
    const filterSensitiveLog: (obj: DisassociateApprovedOriginRequest) => any;
}
export interface DisassociateBotRequest {
    
    InstanceId: string | undefined;
    
    LexBot?: LexBot;
    
    LexV2Bot?: LexV2Bot;
}
export declare namespace DisassociateBotRequest {
    
    const filterSensitiveLog: (obj: DisassociateBotRequest) => any;
}
export interface DisassociateInstanceStorageConfigRequest {
    
    InstanceId: string | undefined;
    
    AssociationId: string | undefined;
    
    ResourceType: InstanceStorageResourceType | string | undefined;
}
export declare namespace DisassociateInstanceStorageConfigRequest {
    
    const filterSensitiveLog: (obj: DisassociateInstanceStorageConfigRequest) => any;
}
export interface DisassociateLambdaFunctionRequest {
    
    InstanceId: string | undefined;
    
    FunctionArn: string | undefined;
}
export declare namespace DisassociateLambdaFunctionRequest {
    
    const filterSensitiveLog: (obj: DisassociateLambdaFunctionRequest) => any;
}
export interface DisassociateLexBotRequest {
    
    InstanceId: string | undefined;
    
    BotName: string | undefined;
    
    LexRegion: string | undefined;
}
export declare namespace DisassociateLexBotRequest {
    
    const filterSensitiveLog: (obj: DisassociateLexBotRequest) => any;
}
export interface DisassociateQueueQuickConnectsRequest {
    
    InstanceId: string | undefined;
    
    QueueId: string | undefined;
    
    QuickConnectIds: string[] | undefined;
}
export declare namespace DisassociateQueueQuickConnectsRequest {
    
    const filterSensitiveLog: (obj: DisassociateQueueQuickConnectsRequest) => any;
}
export interface DisassociateRoutingProfileQueuesRequest {
    
    InstanceId: string | undefined;
    
    RoutingProfileId: string | undefined;
    
    QueueReferences: RoutingProfileQueueReference[] | undefined;
}
export declare namespace DisassociateRoutingProfileQueuesRequest {
    
    const filterSensitiveLog: (obj: DisassociateRoutingProfileQueuesRequest) => any;
}
export interface DisassociateSecurityKeyRequest {
    
    InstanceId: string | undefined;
    
    AssociationId: string | undefined;
}
export declare namespace DisassociateSecurityKeyRequest {
    
    const filterSensitiveLog: (obj: DisassociateSecurityKeyRequest) => any;
}
export interface GetContactAttributesRequest {
    
    InstanceId: string | undefined;
    
    InitialContactId: string | undefined;
}
export declare namespace GetContactAttributesRequest {
    
    const filterSensitiveLog: (obj: GetContactAttributesRequest) => any;
}
export interface GetContactAttributesResponse {
    
    Attributes?: {
        [key: string]: string;
    };
}
export declare namespace GetContactAttributesResponse {
    
    const filterSensitiveLog: (obj: GetContactAttributesResponse) => any;
}
export declare enum CurrentMetricName {
    AGENTS_AFTER_CONTACT_WORK = "AGENTS_AFTER_CONTACT_WORK",
    AGENTS_AVAILABLE = "AGENTS_AVAILABLE",
    AGENTS_ERROR = "AGENTS_ERROR",
    AGENTS_NON_PRODUCTIVE = "AGENTS_NON_PRODUCTIVE",
    AGENTS_ONLINE = "AGENTS_ONLINE",
    AGENTS_ON_CALL = "AGENTS_ON_CALL",
    AGENTS_ON_CONTACT = "AGENTS_ON_CONTACT",
    AGENTS_STAFFED = "AGENTS_STAFFED",
    CONTACTS_IN_QUEUE = "CONTACTS_IN_QUEUE",
    CONTACTS_SCHEDULED = "CONTACTS_SCHEDULED",
    OLDEST_CONTACT_AGE = "OLDEST_CONTACT_AGE",
    SLOTS_ACTIVE = "SLOTS_ACTIVE",
    SLOTS_AVAILABLE = "SLOTS_AVAILABLE"
}
export declare enum Unit {
    COUNT = "COUNT",
    PERCENT = "PERCENT",
    SECONDS = "SECONDS"
}

export interface CurrentMetric {
    
    Name?: CurrentMetricName | string;
    
    Unit?: Unit | string;
}
export declare namespace CurrentMetric {
    
    const filterSensitiveLog: (obj: CurrentMetric) => any;
}

export interface Filters {
    
    Queues?: string[];
    
    Channels?: (Channel | string)[];
}
export declare namespace Filters {
    
    const filterSensitiveLog: (obj: Filters) => any;
}
export declare enum Grouping {
    CHANNEL = "CHANNEL",
    QUEUE = "QUEUE"
}
export interface GetCurrentMetricDataRequest {
    
    InstanceId: string | undefined;
    
    Filters: Filters | undefined;
    
    Groupings?: (Grouping | string)[];
    
    CurrentMetrics: CurrentMetric[] | undefined;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace GetCurrentMetricDataRequest {
    
    const filterSensitiveLog: (obj: GetCurrentMetricDataRequest) => any;
}

export interface CurrentMetricData {
    
    Metric?: CurrentMetric;
    
    Value?: number;
}
export declare namespace CurrentMetricData {
    
    const filterSensitiveLog: (obj: CurrentMetricData) => any;
}

export interface QueueReference {
    
    Id?: string;
    
    Arn?: string;
}
export declare namespace QueueReference {
    
    const filterSensitiveLog: (obj: QueueReference) => any;
}

export interface Dimensions {
    
    Queue?: QueueReference;
    
    Channel?: Channel | string;
}
export declare namespace Dimensions {
    
    const filterSensitiveLog: (obj: Dimensions) => any;
}

export interface CurrentMetricResult {
    
    Dimensions?: Dimensions;
    
    Collections?: CurrentMetricData[];
}
export declare namespace CurrentMetricResult {
    
    const filterSensitiveLog: (obj: CurrentMetricResult) => any;
}
export interface GetCurrentMetricDataResponse {
    
    NextToken?: string;
    
    MetricResults?: CurrentMetricResult[];
    
    DataSnapshotTime?: Date;
}
export declare namespace GetCurrentMetricDataResponse {
    
    const filterSensitiveLog: (obj: GetCurrentMetricDataResponse) => any;
}
export interface GetFederationTokenRequest {
    
    InstanceId: string | undefined;
}
export declare namespace GetFederationTokenRequest {
    
    const filterSensitiveLog: (obj: GetFederationTokenRequest) => any;
}

export interface Credentials {
    
    AccessToken?: string;
    
    AccessTokenExpiration?: Date;
    
    RefreshToken?: string;
    
    RefreshTokenExpiration?: Date;
}
export declare namespace Credentials {
    
    const filterSensitiveLog: (obj: Credentials) => any;
}
export interface GetFederationTokenResponse {
    
    Credentials?: Credentials;
}
export declare namespace GetFederationTokenResponse {
    
    const filterSensitiveLog: (obj: GetFederationTokenResponse) => any;
}

export interface UserNotFoundException extends __SmithyException, $MetadataBearer {
    name: "UserNotFoundException";
    $fault: "client";
    Message?: string;
}
export declare enum HistoricalMetricName {
    ABANDON_TIME = "ABANDON_TIME",
    AFTER_CONTACT_WORK_TIME = "AFTER_CONTACT_WORK_TIME",
    API_CONTACTS_HANDLED = "API_CONTACTS_HANDLED",
    CALLBACK_CONTACTS_HANDLED = "CALLBACK_CONTACTS_HANDLED",
    CONTACTS_ABANDONED = "CONTACTS_ABANDONED",
    CONTACTS_AGENT_HUNG_UP_FIRST = "CONTACTS_AGENT_HUNG_UP_FIRST",
    CONTACTS_CONSULTED = "CONTACTS_CONSULTED",
    CONTACTS_HANDLED = "CONTACTS_HANDLED",
    CONTACTS_HANDLED_INCOMING = "CONTACTS_HANDLED_INCOMING",
    CONTACTS_HANDLED_OUTBOUND = "CONTACTS_HANDLED_OUTBOUND",
    CONTACTS_HOLD_ABANDONS = "CONTACTS_HOLD_ABANDONS",
    CONTACTS_MISSED = "CONTACTS_MISSED",
    CONTACTS_QUEUED = "CONTACTS_QUEUED",
    CONTACTS_TRANSFERRED_IN = "CONTACTS_TRANSFERRED_IN",
    CONTACTS_TRANSFERRED_IN_FROM_QUEUE = "CONTACTS_TRANSFERRED_IN_FROM_QUEUE",
    CONTACTS_TRANSFERRED_OUT = "CONTACTS_TRANSFERRED_OUT",
    CONTACTS_TRANSFERRED_OUT_FROM_QUEUE = "CONTACTS_TRANSFERRED_OUT_FROM_QUEUE",
    HANDLE_TIME = "HANDLE_TIME",
    HOLD_TIME = "HOLD_TIME",
    INTERACTION_AND_HOLD_TIME = "INTERACTION_AND_HOLD_TIME",
    INTERACTION_TIME = "INTERACTION_TIME",
    OCCUPANCY = "OCCUPANCY",
    QUEUED_TIME = "QUEUED_TIME",
    QUEUE_ANSWER_TIME = "QUEUE_ANSWER_TIME",
    SERVICE_LEVEL = "SERVICE_LEVEL"
}
export declare enum Statistic {
    AVG = "AVG",
    MAX = "MAX",
    SUM = "SUM"
}
export declare enum Comparison {
    LT = "LT"
}

export interface Threshold {
    
    Comparison?: Comparison | string;
    
    ThresholdValue?: number;
}
export declare namespace Threshold {
    
    const filterSensitiveLog: (obj: Threshold) => any;
}

export interface HistoricalMetric {
    
    Name?: HistoricalMetricName | string;
    
    Threshold?: Threshold;
    
    Statistic?: Statistic | string;
    
    Unit?: Unit | string;
}
export declare namespace HistoricalMetric {
    
    const filterSensitiveLog: (obj: HistoricalMetric) => any;
}
export interface GetMetricDataRequest {
    
    InstanceId: string | undefined;
    
    StartTime: Date | undefined;
    
    EndTime: Date | undefined;
    
    Filters: Filters | undefined;
    
    Groupings?: (Grouping | string)[];
    
    HistoricalMetrics: HistoricalMetric[] | undefined;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace GetMetricDataRequest {
    
    const filterSensitiveLog: (obj: GetMetricDataRequest) => any;
}

export interface HistoricalMetricData {
    
    Metric?: HistoricalMetric;
    
    Value?: number;
}
export declare namespace HistoricalMetricData {
    
    const filterSensitiveLog: (obj: HistoricalMetricData) => any;
}

export interface HistoricalMetricResult {
    
    Dimensions?: Dimensions;
    
    Collections?: HistoricalMetricData[];
}
export declare namespace HistoricalMetricResult {
    
    const filterSensitiveLog: (obj: HistoricalMetricResult) => any;
}
export interface GetMetricDataResponse {
    
    NextToken?: string;
    
    MetricResults?: HistoricalMetricResult[];
}
export declare namespace GetMetricDataResponse {
    
    const filterSensitiveLog: (obj: GetMetricDataResponse) => any;
}
export interface ListAgentStatusRequest {
    
    InstanceId: string | undefined;
    
    NextToken?: string;
    
    MaxResults?: number;
    
    AgentStatusTypes?: (AgentStatusType | string)[];
}
export declare namespace ListAgentStatusRequest {
    
    const filterSensitiveLog: (obj: ListAgentStatusRequest) => any;
}
export interface ListAgentStatusResponse {
    
    NextToken?: string;
    
    AgentStatusSummaryList?: AgentStatusSummary[];
}
export declare namespace ListAgentStatusResponse {
    
    const filterSensitiveLog: (obj: ListAgentStatusResponse) => any;
}
export interface ListApprovedOriginsRequest {
    
    InstanceId: string | undefined;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListApprovedOriginsRequest {
    
    const filterSensitiveLog: (obj: ListApprovedOriginsRequest) => any;
}
export interface ListApprovedOriginsResponse {
    
    Origins?: string[];
    
    NextToken?: string;
}
export declare namespace ListApprovedOriginsResponse {
    
    const filterSensitiveLog: (obj: ListApprovedOriginsResponse) => any;
}
export declare enum LexVersion {
    V1 = "V1",
    V2 = "V2"
}
export interface ListBotsRequest {
    
    InstanceId: string | undefined;
    
    NextToken?: string;
    
    MaxResults?: number;
    
    LexVersion: LexVersion | string | undefined;
}
export declare namespace ListBotsRequest {
    
    const filterSensitiveLog: (obj: ListBotsRequest) => any;
}

export interface LexBotConfig {
    
    LexBot?: LexBot;
    
    LexV2Bot?: LexV2Bot;
}
export declare namespace LexBotConfig {
    
    const filterSensitiveLog: (obj: LexBotConfig) => any;
}
export interface ListBotsResponse {
    
    LexBots?: LexBotConfig[];
    
    NextToken?: string;
}
export declare namespace ListBotsResponse {
    
    const filterSensitiveLog: (obj: ListBotsResponse) => any;
}
export interface ListContactFlowModulesRequest {
    
    InstanceId: string | undefined;
    
    NextToken?: string;
    
    MaxResults?: number;
    
    ContactFlowModuleState?: ContactFlowModuleState | string;
}
export declare namespace ListContactFlowModulesRequest {
    
    const filterSensitiveLog: (obj: ListContactFlowModulesRequest) => any;
}

export interface ContactFlowModuleSummary {
    
    Id?: string;
    
    Arn?: string;
    
    Name?: string;
    
    State?: ContactFlowModuleState | string;
}
export declare namespace ContactFlowModuleSummary {
    
    const filterSensitiveLog: (obj: ContactFlowModuleSummary) => any;
}
export interface ListContactFlowModulesResponse {
    
    ContactFlowModulesSummaryList?: ContactFlowModuleSummary[];
    
    NextToken?: string;
}
export declare namespace ListContactFlowModulesResponse {
    
    const filterSensitiveLog: (obj: ListContactFlowModulesResponse) => any;
}
export interface ListContactFlowsRequest {
    
    InstanceId: string | undefined;
    
    ContactFlowTypes?: (ContactFlowType | string)[];
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListContactFlowsRequest {
    
    const filterSensitiveLog: (obj: ListContactFlowsRequest) => any;
}

export interface ContactFlowSummary {
    
    Id?: string;
    
    Arn?: string;
    
    Name?: string;
    
    ContactFlowType?: ContactFlowType | string;
    
    ContactFlowState?: ContactFlowState | string;
}
export declare namespace ContactFlowSummary {
    
    const filterSensitiveLog: (obj: ContactFlowSummary) => any;
}
export interface ListContactFlowsResponse {
    
    ContactFlowSummaryList?: ContactFlowSummary[];
    
    NextToken?: string;
}
export declare namespace ListContactFlowsResponse {
    
    const filterSensitiveLog: (obj: ListContactFlowsResponse) => any;
}
export declare enum ReferenceType {
    ATTACHMENT = "ATTACHMENT",
    URL = "URL"
}
export interface ListContactReferencesRequest {
    
    InstanceId: string | undefined;
    
    ContactId: string | undefined;
    
    ReferenceTypes: (ReferenceType | string)[] | undefined;
    
    NextToken?: string;
}
export declare namespace ListContactReferencesRequest {
    
    const filterSensitiveLog: (obj: ListContactReferencesRequest) => any;
}
export declare enum ReferenceStatus {
    APPROVED = "APPROVED",
    REJECTED = "REJECTED"
}

export interface AttachmentReference {
    
    Name?: string;
    
    Value?: string;
    
    Status?: ReferenceStatus | string;
}
export declare namespace AttachmentReference {
    
    const filterSensitiveLog: (obj: AttachmentReference) => any;
}

export interface UrlReference {
    
    Name?: string;
    
    Value?: string;
}
export declare namespace UrlReference {
    
    const filterSensitiveLog: (obj: UrlReference) => any;
}

export declare type ReferenceSummary = ReferenceSummary.AttachmentMember | ReferenceSummary.UrlMember | ReferenceSummary.$UnknownMember;
export declare namespace ReferenceSummary {
    
    interface UrlMember {
        Url: UrlReference;
        Attachment?: never;
        $unknown?: never;
    }
    
    interface AttachmentMember {
        Url?: never;
        Attachment: AttachmentReference;
        $unknown?: never;
    }
    interface $UnknownMember {
        Url?: never;
        Attachment?: never;
        $unknown: [
            string,
            any
        ];
    }
    interface Visitor<T> {
        Url: (value: UrlReference) => T;
        Attachment: (value: AttachmentReference) => T;
        _: (name: string, value: any) => T;
    }
    const visit: <T>(value: ReferenceSummary, visitor: Visitor<T>) => T;
    
    const filterSensitiveLog: (obj: ReferenceSummary) => any;
}
export interface ListContactReferencesResponse {
    
    ReferenceSummaryList?: ReferenceSummary[];
    
    NextToken?: string;
}
export declare namespace ListContactReferencesResponse {
    
    const filterSensitiveLog: (obj: ListContactReferencesResponse) => any;
}
export interface ListDefaultVocabulariesRequest {
    
    InstanceId: string | undefined;
    
    LanguageCode?: VocabularyLanguageCode | string;
    
    MaxResults?: number;
    
    NextToken?: string;
}
export declare namespace ListDefaultVocabulariesRequest {
    
    const filterSensitiveLog: (obj: ListDefaultVocabulariesRequest) => any;
}

export interface DefaultVocabulary {
    
    InstanceId: string | undefined;
    
    LanguageCode: VocabularyLanguageCode | string | undefined;
    
    VocabularyId: string | undefined;
    
    VocabularyName: string | undefined;
}
export declare namespace DefaultVocabulary {
    
    const filterSensitiveLog: (obj: DefaultVocabulary) => any;
}
export interface ListDefaultVocabulariesResponse {
    
    DefaultVocabularyList: DefaultVocabulary[] | undefined;
    
    NextToken?: string;
}
export declare namespace ListDefaultVocabulariesResponse {
    
    const filterSensitiveLog: (obj: ListDefaultVocabulariesResponse) => any;
}
export interface ListHoursOfOperationsRequest {
    
    InstanceId: string | undefined;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListHoursOfOperationsRequest {
    
    const filterSensitiveLog: (obj: ListHoursOfOperationsRequest) => any;
}

export interface HoursOfOperationSummary {
    
    Id?: string;
    
    Arn?: string;
    
    Name?: string;
}
export declare namespace HoursOfOperationSummary {
    
    const filterSensitiveLog: (obj: HoursOfOperationSummary) => any;
}
export interface ListHoursOfOperationsResponse {
    
    HoursOfOperationSummaryList?: HoursOfOperationSummary[];
    
    NextToken?: string;
}
export declare namespace ListHoursOfOperationsResponse {
    
    const filterSensitiveLog: (obj: ListHoursOfOperationsResponse) => any;
}
export interface ListInstanceAttributesRequest {
    
    InstanceId: string | undefined;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListInstanceAttributesRequest {
    
    const filterSensitiveLog: (obj: ListInstanceAttributesRequest) => any;
}
export interface ListInstanceAttributesResponse {
    
    Attributes?: Attribute[];
    
    NextToken?: string;
}
export declare namespace ListInstanceAttributesResponse {
    
    const filterSensitiveLog: (obj: ListInstanceAttributesResponse) => any;
}
export interface ListInstancesRequest {
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListInstancesRequest {
    
    const filterSensitiveLog: (obj: ListInstancesRequest) => any;
}

export interface InstanceSummary {
    
    Id?: string;
    
    Arn?: string;
    
    IdentityManagementType?: DirectoryType | string;
    
    InstanceAlias?: string;
    
    CreatedTime?: Date;
    
    ServiceRole?: string;
    
    InstanceStatus?: InstanceStatus | string;
    
    InboundCallsEnabled?: boolean;
    
    OutboundCallsEnabled?: boolean;
}
export declare namespace InstanceSummary {
    
    const filterSensitiveLog: (obj: InstanceSummary) => any;
}
export interface ListInstancesResponse {
    
    InstanceSummaryList?: InstanceSummary[];
    
    NextToken?: string;
}
export declare namespace ListInstancesResponse {
    
    const filterSensitiveLog: (obj: ListInstancesResponse) => any;
}
export interface ListInstanceStorageConfigsRequest {
    
    InstanceId: string | undefined;
    
    ResourceType: InstanceStorageResourceType | string | undefined;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListInstanceStorageConfigsRequest {
    
    const filterSensitiveLog: (obj: ListInstanceStorageConfigsRequest) => any;
}
export interface ListInstanceStorageConfigsResponse {
    
    StorageConfigs?: InstanceStorageConfig[];
    
    NextToken?: string;
}
export declare namespace ListInstanceStorageConfigsResponse {
    
    const filterSensitiveLog: (obj: ListInstanceStorageConfigsResponse) => any;
}
export interface ListIntegrationAssociationsRequest {
    
    InstanceId: string | undefined;
    
    IntegrationType?: IntegrationType | string;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListIntegrationAssociationsRequest {
    
    const filterSensitiveLog: (obj: ListIntegrationAssociationsRequest) => any;
}

export interface IntegrationAssociationSummary {
    
    IntegrationAssociationId?: string;
    
    IntegrationAssociationArn?: string;
    
    InstanceId?: string;
    
    IntegrationType?: IntegrationType | string;
    
    IntegrationArn?: string;
    
    SourceApplicationUrl?: string;
    
    SourceApplicationName?: string;
    
    SourceType?: SourceType | string;
}
export declare namespace IntegrationAssociationSummary {
    
    const filterSensitiveLog: (obj: IntegrationAssociationSummary) => any;
}
export interface ListIntegrationAssociationsResponse {
    
    IntegrationAssociationSummaryList?: IntegrationAssociationSummary[];
    
    NextToken?: string;
}
export declare namespace ListIntegrationAssociationsResponse {
    
    const filterSensitiveLog: (obj: ListIntegrationAssociationsResponse) => any;
}
export interface ListLambdaFunctionsRequest {
    
    InstanceId: string | undefined;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListLambdaFunctionsRequest {
    
    const filterSensitiveLog: (obj: ListLambdaFunctionsRequest) => any;
}
export interface ListLambdaFunctionsResponse {
    
    LambdaFunctions?: string[];
    
    NextToken?: string;
}
export declare namespace ListLambdaFunctionsResponse {
    
    const filterSensitiveLog: (obj: ListLambdaFunctionsResponse) => any;
}
export interface ListLexBotsRequest {
    
    InstanceId: string | undefined;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListLexBotsRequest {
    
    const filterSensitiveLog: (obj: ListLexBotsRequest) => any;
}
export interface ListLexBotsResponse {
    
    LexBots?: LexBot[];
    
    NextToken?: string;
}
export declare namespace ListLexBotsResponse {
    
    const filterSensitiveLog: (obj: ListLexBotsResponse) => any;
}
export declare enum PhoneNumberCountryCode {
    AD = "AD",
    AE = "AE",
    AF = "AF",
    AG = "AG",
    AI = "AI",
    AL = "AL",
    AM = "AM",
    AN = "AN",
    AO = "AO",
    AQ = "AQ",
    AR = "AR",
    AS = "AS",
    AT = "AT",
    AU = "AU",
    AW = "AW",
    AZ = "AZ",
    BA = "BA",
    BB = "BB",
    BD = "BD",
    BE = "BE",
    BF = "BF",
    BG = "BG",
    BH = "BH",
    BI = "BI",
    BJ = "BJ",
    BL = "BL",
    BM = "BM",
    BN = "BN",
    BO = "BO",
    BR = "BR",
    BS = "BS",
    BT = "BT",
    BW = "BW",
    BY = "BY",
    BZ = "BZ",
    CA = "CA",
    CC = "CC",
    CD = "CD",
    CF = "CF",
    CG = "CG",
    CH = "CH",
    CI = "CI",
    CK = "CK",
    CL = "CL",
    CM = "CM",
    CN = "CN",
    CO = "CO",
    CR = "CR",
    CU = "CU",
    CV = "CV",
    CW = "CW",
    CX = "CX",
    CY = "CY",
    CZ = "CZ",
    DE = "DE",
    DJ = "DJ",
    DK = "DK",
    DM = "DM",
    DO = "DO",
    DZ = "DZ",
    EC = "EC",
    EE = "EE",
    EG = "EG",
    EH = "EH",
    ER = "ER",
    ES = "ES",
    ET = "ET",
    FI = "FI",
    FJ = "FJ",
    FK = "FK",
    FM = "FM",
    FO = "FO",
    FR = "FR",
    GA = "GA",
    GB = "GB",
    GD = "GD",
    GE = "GE",
    GG = "GG",
    GH = "GH",
    GI = "GI",
    GL = "GL",
    GM = "GM",
    GN = "GN",
    GQ = "GQ",
    GR = "GR",
    GT = "GT",
    GU = "GU",
    GW = "GW",
    GY = "GY",
    HK = "HK",
    HN = "HN",
    HR = "HR",
    HT = "HT",
    HU = "HU",
    ID = "ID",
    IE = "IE",
    IL = "IL",
    IM = "IM",
    IN = "IN",
    IO = "IO",
    IQ = "IQ",
    IR = "IR",
    IS = "IS",
    IT = "IT",
    JE = "JE",
    JM = "JM",
    JO = "JO",
    JP = "JP",
    KE = "KE",
    KG = "KG",
    KH = "KH",
    KI = "KI",
    KM = "KM",
    KN = "KN",
    KP = "KP",
    KR = "KR",
    KW = "KW",
    KY = "KY",
    KZ = "KZ",
    LA = "LA",
    LB = "LB",
    LC = "LC",
    LI = "LI",
    LK = "LK",
    LR = "LR",
    LS = "LS",
    LT = "LT",
    LU = "LU",
    LV = "LV",
    LY = "LY",
    MA = "MA",
    MC = "MC",
    MD = "MD",
    ME = "ME",
    MF = "MF",
    MG = "MG",
    MH = "MH",
    MK = "MK",
    ML = "ML",
    MM = "MM",
    MN = "MN",
    MO = "MO",
    MP = "MP",
    MR = "MR",
    MS = "MS",
    MT = "MT",
    MU = "MU",
    MV = "MV",
    MW = "MW",
    MX = "MX",
    MY = "MY",
    MZ = "MZ",
    NA = "NA",
    NC = "NC",
    NE = "NE",
    NG = "NG",
    NI = "NI",
    NL = "NL",
    NO = "NO",
    NP = "NP",
    NR = "NR",
    NU = "NU",
    NZ = "NZ",
    OM = "OM",
    PA = "PA",
    PE = "PE",
    PF = "PF",
    PG = "PG",
    PH = "PH",
    PK = "PK",
    PL = "PL",
    PM = "PM",
    PN = "PN",
    PR = "PR",
    PT = "PT",
    PW = "PW",
    PY = "PY",
    QA = "QA",
    RE = "RE",
    RO = "RO",
    RS = "RS",
    RU = "RU",
    RW = "RW",
    SA = "SA",
    SB = "SB",
    SC = "SC",
    SD = "SD",
    SE = "SE",
    SG = "SG",
    SH = "SH",
    SI = "SI",
    SJ = "SJ",
    SK = "SK",
    SL = "SL",
    SM = "SM",
    SN = "SN",
    SO = "SO",
    SR = "SR",
    ST = "ST",
    SV = "SV",
    SX = "SX",
    SY = "SY",
    SZ = "SZ",
    TC = "TC",
    TD = "TD",
    TG = "TG",
    TH = "TH",
    TJ = "TJ",
    TK = "TK",
    TL = "TL",
    TM = "TM",
    TN = "TN",
    TO = "TO",
    TR = "TR",
    TT = "TT",
    TV = "TV",
    TW = "TW",
    TZ = "TZ",
    UA = "UA",
    UG = "UG",
    US = "US",
    UY = "UY",
    UZ = "UZ",
    VA = "VA",
    VC = "VC",
    VE = "VE",
    VG = "VG",
    VI = "VI",
    VN = "VN",
    VU = "VU",
    WF = "WF",
    WS = "WS",
    YE = "YE",
    YT = "YT",
    ZA = "ZA",
    ZM = "ZM",
    ZW = "ZW"
}
export declare enum PhoneNumberType {
    DID = "DID",
    TOLL_FREE = "TOLL_FREE"
}
export interface ListPhoneNumbersRequest {
    
    InstanceId: string | undefined;
    
    PhoneNumberTypes?: (PhoneNumberType | string)[];
    
    PhoneNumberCountryCodes?: (PhoneNumberCountryCode | string)[];
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListPhoneNumbersRequest {
    
    const filterSensitiveLog: (obj: ListPhoneNumbersRequest) => any;
}

export interface PhoneNumberSummary {
    
    Id?: string;
    
    Arn?: string;
    
    PhoneNumber?: string;
    
    PhoneNumberType?: PhoneNumberType | string;
    
    PhoneNumberCountryCode?: PhoneNumberCountryCode | string;
}
export declare namespace PhoneNumberSummary {
    
    const filterSensitiveLog: (obj: PhoneNumberSummary) => any;
}
export interface ListPhoneNumbersResponse {
    
    PhoneNumberSummaryList?: PhoneNumberSummary[];
    
    NextToken?: string;
}
export declare namespace ListPhoneNumbersResponse {
    
    const filterSensitiveLog: (obj: ListPhoneNumbersResponse) => any;
}
export interface ListPromptsRequest {
    
    InstanceId: string | undefined;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListPromptsRequest {
    
    const filterSensitiveLog: (obj: ListPromptsRequest) => any;
}

export interface PromptSummary {
    
    Id?: string;
    
    Arn?: string;
    
    Name?: string;
}
export declare namespace PromptSummary {
    
    const filterSensitiveLog: (obj: PromptSummary) => any;
}
export interface ListPromptsResponse {
    
    PromptSummaryList?: PromptSummary[];
    
    NextToken?: string;
}
export declare namespace ListPromptsResponse {
    
    const filterSensitiveLog: (obj: ListPromptsResponse) => any;
}
export interface ListQueueQuickConnectsRequest {
    
    InstanceId: string | undefined;
    
    QueueId: string | undefined;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListQueueQuickConnectsRequest {
    
    const filterSensitiveLog: (obj: ListQueueQuickConnectsRequest) => any;
}

export interface QuickConnectSummary {
    
    Id?: string;
    
    Arn?: string;
    
    Name?: string;
    
    QuickConnectType?: QuickConnectType | string;
}
export declare namespace QuickConnectSummary {
    
    const filterSensitiveLog: (obj: QuickConnectSummary) => any;
}
export interface ListQueueQuickConnectsResponse {
    
    NextToken?: string;
    
    QuickConnectSummaryList?: QuickConnectSummary[];
}
export declare namespace ListQueueQuickConnectsResponse {
    
    const filterSensitiveLog: (obj: ListQueueQuickConnectsResponse) => any;
}
export declare enum QueueType {
    AGENT = "AGENT",
    STANDARD = "STANDARD"
}
export interface ListQueuesRequest {
    
    InstanceId: string | undefined;
    
    QueueTypes?: (QueueType | string)[];
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListQueuesRequest {
    
    const filterSensitiveLog: (obj: ListQueuesRequest) => any;
}

export interface QueueSummary {
    
    Id?: string;
    
    Arn?: string;
    
    Name?: string;
    
    QueueType?: QueueType | string;
}
export declare namespace QueueSummary {
    
    const filterSensitiveLog: (obj: QueueSummary) => any;
}
export interface ListQueuesResponse {
    
    QueueSummaryList?: QueueSummary[];
    
    NextToken?: string;
}
export declare namespace ListQueuesResponse {
    
    const filterSensitiveLog: (obj: ListQueuesResponse) => any;
}
export interface ListQuickConnectsRequest {
    
    InstanceId: string | undefined;
    
    NextToken?: string;
    
    MaxResults?: number;
    
    QuickConnectTypes?: (QuickConnectType | string)[];
}
export declare namespace ListQuickConnectsRequest {
    
    const filterSensitiveLog: (obj: ListQuickConnectsRequest) => any;
}
export interface ListQuickConnectsResponse {
    
    QuickConnectSummaryList?: QuickConnectSummary[];
    
    NextToken?: string;
}
export declare namespace ListQuickConnectsResponse {
    
    const filterSensitiveLog: (obj: ListQuickConnectsResponse) => any;
}
export interface ListRoutingProfileQueuesRequest {
    
    InstanceId: string | undefined;
    
    RoutingProfileId: string | undefined;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListRoutingProfileQueuesRequest {
    
    const filterSensitiveLog: (obj: ListRoutingProfileQueuesRequest) => any;
}

export interface RoutingProfileQueueConfigSummary {
    
    QueueId: string | undefined;
    
    QueueArn: string | undefined;
    
    QueueName: string | undefined;
    
    Priority: number | undefined;
    
    Delay: number | undefined;
    
    Channel: Channel | string | undefined;
}
export declare namespace RoutingProfileQueueConfigSummary {
    
    const filterSensitiveLog: (obj: RoutingProfileQueueConfigSummary) => any;
}
export interface ListRoutingProfileQueuesResponse {
    
    NextToken?: string;
    
    RoutingProfileQueueConfigSummaryList?: RoutingProfileQueueConfigSummary[];
}
export declare namespace ListRoutingProfileQueuesResponse {
    
    const filterSensitiveLog: (obj: ListRoutingProfileQueuesResponse) => any;
}
export interface ListRoutingProfilesRequest {
    
    InstanceId: string | undefined;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListRoutingProfilesRequest {
    
    const filterSensitiveLog: (obj: ListRoutingProfilesRequest) => any;
}

export interface RoutingProfileSummary {
    
    Id?: string;
    
    Arn?: string;
    
    Name?: string;
}
export declare namespace RoutingProfileSummary {
    
    const filterSensitiveLog: (obj: RoutingProfileSummary) => any;
}
export interface ListRoutingProfilesResponse {
    
    RoutingProfileSummaryList?: RoutingProfileSummary[];
    
    NextToken?: string;
}
export declare namespace ListRoutingProfilesResponse {
    
    const filterSensitiveLog: (obj: ListRoutingProfilesResponse) => any;
}
export interface ListSecurityKeysRequest {
    
    InstanceId: string | undefined;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListSecurityKeysRequest {
    
    const filterSensitiveLog: (obj: ListSecurityKeysRequest) => any;
}

export interface SecurityKey {
    
    AssociationId?: string;
    
    Key?: string;
    
    CreationTime?: Date;
}
export declare namespace SecurityKey {
    
    const filterSensitiveLog: (obj: SecurityKey) => any;
}
export interface ListSecurityKeysResponse {
    
    SecurityKeys?: SecurityKey[];
    
    NextToken?: string;
}
export declare namespace ListSecurityKeysResponse {
    
    const filterSensitiveLog: (obj: ListSecurityKeysResponse) => any;
}
export interface ListSecurityProfilePermissionsRequest {
    
    SecurityProfileId: string | undefined;
    
    InstanceId: string | undefined;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListSecurityProfilePermissionsRequest {
    
    const filterSensitiveLog: (obj: ListSecurityProfilePermissionsRequest) => any;
}
export interface ListSecurityProfilePermissionsResponse {
    
    Permissions?: string[];
    
    NextToken?: string;
}
export declare namespace ListSecurityProfilePermissionsResponse {
    
    const filterSensitiveLog: (obj: ListSecurityProfilePermissionsResponse) => any;
}
export interface ListSecurityProfilesRequest {
    
    InstanceId: string | undefined;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListSecurityProfilesRequest {
    
    const filterSensitiveLog: (obj: ListSecurityProfilesRequest) => any;
}

export interface SecurityProfileSummary {
    
    Id?: string;
    
    Arn?: string;
    
    Name?: string;
}
export declare namespace SecurityProfileSummary {
    
    const filterSensitiveLog: (obj: SecurityProfileSummary) => any;
}
export interface ListSecurityProfilesResponse {
    
    SecurityProfileSummaryList?: SecurityProfileSummary[];
    
    NextToken?: string;
}
export declare namespace ListSecurityProfilesResponse {
    
    const filterSensitiveLog: (obj: ListSecurityProfilesResponse) => any;
}
export interface ListTagsForResourceRequest {
    
    resourceArn: string | undefined;
}
export declare namespace ListTagsForResourceRequest {
    
    const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
}
export interface ListTagsForResourceResponse {
    
    tags?: {
        [key: string]: string;
    };
}
export declare namespace ListTagsForResourceResponse {
    
    const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
}

export interface ListUseCasesRequest {
    
    InstanceId: string | undefined;
    
    IntegrationAssociationId: string | undefined;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListUseCasesRequest {
    
    const filterSensitiveLog: (obj: ListUseCasesRequest) => any;
}

export interface UseCase {
    
    UseCaseId?: string;
    
    UseCaseArn?: string;
    
    UseCaseType?: UseCaseType | string;
}
export declare namespace UseCase {
    
    const filterSensitiveLog: (obj: UseCase) => any;
}
export interface ListUseCasesResponse {
    
    UseCaseSummaryList?: UseCase[];
    
    NextToken?: string;
}
export declare namespace ListUseCasesResponse {
    
    const filterSensitiveLog: (obj: ListUseCasesResponse) => any;
}
export interface ListUserHierarchyGroupsRequest {
    
    InstanceId: string | undefined;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListUserHierarchyGroupsRequest {
    
    const filterSensitiveLog: (obj: ListUserHierarchyGroupsRequest) => any;
}
export interface ListUserHierarchyGroupsResponse {
    
    UserHierarchyGroupSummaryList?: HierarchyGroupSummary[];
    
    NextToken?: string;
}
export declare namespace ListUserHierarchyGroupsResponse {
    
    const filterSensitiveLog: (obj: ListUserHierarchyGroupsResponse) => any;
}
export interface ListUsersRequest {
    
    InstanceId: string | undefined;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListUsersRequest {
    
    const filterSensitiveLog: (obj: ListUsersRequest) => any;
}

export interface UserSummary {
    
    Id?: string;
    
    Arn?: string;
    
    Username?: string;
}
export declare namespace UserSummary {
    
    const filterSensitiveLog: (obj: UserSummary) => any;
}
export interface ListUsersResponse {
    
    UserSummaryList?: UserSummary[];
    
    NextToken?: string;
}
export declare namespace ListUsersResponse {
    
    const filterSensitiveLog: (obj: ListUsersResponse) => any;
}
export interface ResumeContactRecordingRequest {
    
    InstanceId: string | undefined;
    
    ContactId: string | undefined;
    
    InitialContactId: string | undefined;
}
export declare namespace ResumeContactRecordingRequest {
    
    const filterSensitiveLog: (obj: ResumeContactRecordingRequest) => any;
}
export interface ResumeContactRecordingResponse {
}
export declare namespace ResumeContactRecordingResponse {
    
    const filterSensitiveLog: (obj: ResumeContactRecordingResponse) => any;
}
export interface SearchVocabulariesRequest {
    
    InstanceId: string | undefined;
    
    MaxResults?: number;
    
    NextToken?: string;
    
    State?: VocabularyState | string;
    
    NameStartsWith?: string;
    
    LanguageCode?: VocabularyLanguageCode | string;
}
export declare namespace SearchVocabulariesRequest {
    
    const filterSensitiveLog: (obj: SearchVocabulariesRequest) => any;
}

export interface VocabularySummary {
    
    Name: string | undefined;
    
    Id: string | undefined;
    
    Arn: string | undefined;
    
    LanguageCode: VocabularyLanguageCode | string | undefined;
    
    State: VocabularyState | string | undefined;
    
    LastModifiedTime: Date | undefined;
    
    FailureReason?: string;
}
export declare namespace VocabularySummary {
    
    const filterSensitiveLog: (obj: VocabularySummary) => any;
}
export interface SearchVocabulariesResponse {
    
    VocabularySummaryList?: VocabularySummary[];
    
    NextToken?: string;
}
export declare namespace SearchVocabulariesResponse {
    
    const filterSensitiveLog: (obj: SearchVocabulariesResponse) => any;
}

export interface ChatMessage {
    
    ContentType: string | undefined;
    
    Content: string | undefined;
}
export declare namespace ChatMessage {
    
    const filterSensitiveLog: (obj: ChatMessage) => any;
}

export interface ParticipantDetails {
    
    DisplayName: string | undefined;
}
export declare namespace ParticipantDetails {
    
    const filterSensitiveLog: (obj: ParticipantDetails) => any;
}
export interface StartChatContactRequest {
    
    InstanceId: string | undefined;
    
    ContactFlowId: string | undefined;
    
    Attributes?: {
        [key: string]: string;
    };
    
    ParticipantDetails: ParticipantDetails | undefined;
    
    InitialMessage?: ChatMessage;
    
    ClientToken?: string;
    
    ChatDurationInMinutes?: number;
}
export declare namespace StartChatContactRequest {
    
    const filterSensitiveLog: (obj: StartChatContactRequest) => any;
}
export interface StartChatContactResponse {
    
    ContactId?: string;
    
    ParticipantId?: string;
    
    ParticipantToken?: string;
}
export declare namespace StartChatContactResponse {
    
    const filterSensitiveLog: (obj: StartChatContactResponse) => any;
}
export declare enum VoiceRecordingTrack {
    ALL = "ALL",
    FROM_AGENT = "FROM_AGENT",
    TO_AGENT = "TO_AGENT"
}

export interface VoiceRecordingConfiguration {
    
    VoiceRecordingTrack?: VoiceRecordingTrack | string;
}
export declare namespace VoiceRecordingConfiguration {
    
    const filterSensitiveLog: (obj: VoiceRecordingConfiguration) => any;
}
export interface StartContactRecordingRequest {
    
    InstanceId: string | undefined;
    
    ContactId: string | undefined;
    
    InitialContactId: string | undefined;
    
    VoiceRecordingConfiguration: VoiceRecordingConfiguration | undefined;
}
export declare namespace StartContactRecordingRequest {
    
    const filterSensitiveLog: (obj: StartContactRecordingRequest) => any;
}
export interface StartContactRecordingResponse {
}
export declare namespace StartContactRecordingResponse {
    
    const filterSensitiveLog: (obj: StartContactRecordingResponse) => any;
}

export interface ChatStreamingConfiguration {
    
    StreamingEndpointArn: string | undefined;
}
export declare namespace ChatStreamingConfiguration {
    
    const filterSensitiveLog: (obj: ChatStreamingConfiguration) => any;
}
export interface StartContactStreamingRequest {
    
    InstanceId: string | undefined;
    
    ContactId: string | undefined;
    
    ChatStreamingConfiguration: ChatStreamingConfiguration | undefined;
    
    ClientToken?: string;
}
export declare namespace StartContactStreamingRequest {
    
    const filterSensitiveLog: (obj: StartContactStreamingRequest) => any;
}
export interface StartContactStreamingResponse {
    
    StreamingId: string | undefined;
}
export declare namespace StartContactStreamingResponse {
    
    const filterSensitiveLog: (obj: StartContactStreamingResponse) => any;
}

export interface DestinationNotAllowedException extends __SmithyException, $MetadataBearer {
    name: "DestinationNotAllowedException";
    $fault: "client";
    
    Message?: string;
}
